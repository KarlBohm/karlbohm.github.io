---
layout: post
title:  "数理逻辑 0：一点记号和其他"
date:   2022-02-03 00:34:50 +0800
categories: 数理逻辑
description: 过了一朝又一朝，心中好似滚油浇。一路的盘费都花了，卖了宝剑我买了一把刀。
---
考虑到《数理逻辑十二讲》的可读性实在让人难以恭维（甚至连[课程网站](https://yiqinnju.github.io/course/MathLogic/MathLogic.html)上都直接承认了这一点），笔者目前在看李未的《数理逻辑》。两本书在组织结构上有些不同，反正我就按照后者的顺序来写了。本篇是“创刊号”，因此不会写太多内容，权当试（划）一下水罢了。

## 符号们

$ V $ 是可数无穷个变元 $x_1,x_2...x_n...$ 的集合

$C$ 是连接（联结？）词，有$\neg,\land,\lor,\to$, 李未的书中还有$\leftrightarrow$，反正可以用$\to$表示

$E$ 是等词 $\doteq$，需要注意的是$\doteq$与$=$并不一样，$a=b$ 与 $a\doteq b$ 并无关系

$Q$ 是量词 $\exists$ 和 $\forall$

$K$ 是两个括号() （警惕全半角符号混用！）

除此之外，我们还有几个非逻辑符：

$\mathscr{L}_c$ 是常元符号的集合 $\{c_0,c_1...\}$

$\mathscr L_f$ 是函数符号的集合$\{f_0,f_1...\}$

$\mathscr L_P$ 是谓词符号的集合$\{P_0,P_1...\}$，显然 $\doteq$ 是也是一个二元谓词。

考虑到任意知识的一阶语言都有相同的逻辑符号，因此我们可以通过描述后三个集合来描述一个一阶语言

## 项与公式

《十二讲》是先介绍命题逻辑再介绍一阶逻辑的，而李未的书直接从一阶逻辑开始引出的推理系统... 反正我就写这里了，命题逻辑以后再补。项是由以下的 BNF 定义的：

$$
t::=c|x|f(t_1,t_2...t_n)
$$

题外话：必须批判一下中文翻译的随意：一般来说范式指的 paradigm, 库恩用这个词来形容物理学研究中公认模式与共识的（虽然这个词在英文世界中也早已被滥用了）。然而在“巴库斯范式”这个词实际上是 Backus-Naur Form，与 paradigm 没有任何关系。我想翻译成巴库斯形式会更好一些... 

言归正传，通过项我们可以很轻松地递归定义逻辑公式：

$$
A::=t_1\doteq t_2|P(t_1...t_n)|\neg A|A\land B|A\lor B|A\to B|\forall xA|\exists xA
$$

由前两个方式定义的是原子公式，而后面定义的公式则是复合公式。不难发现这个形式包含了命题的定义：

$$
A::=\neg A|A\land B|A\lor B|A\to B
$$

毕竟一阶逻辑是命题逻辑在谓词和量词上的拓展。也正因为此，在一阶逻辑中需要考虑命题的项与其中的变元——这是命题逻辑所忽略的。

## 自由变元

我们把某一个项 $t$ 的自由变元的集合记作 $FV(t)$，即若 $x\in FV(t)$，则 $x$ 为 $t$ 的一个自由变元。$FV(t)$ 是由以下三个规则递归定义的：

$$
\left \{ 
\begin{array}
FV(x)=\{x\},&x是一个变元\\
FV(c)=\varnothing,&c是一个常元\\
FV(f(t_1...t_n))=FV(t_1)\cup...\cup FV(t_n).
\end{array}
\right .
$$

这是相当易懂的。我们也称满足 $FV(t)=\varnothing$ 的项为基项。而对于公式的自由变元，我们则有一个更复杂的定义：

$$
\left\{
\begin{align}
&FV(t_1\doteq t_2)=FV(t_1)\cup FV(t_2)\\
&FV(P(t_1...t_n))=FV(t_1)\cup...\cup FV(t_n)\\
&FV(\neg A)=FV(A)\\
&FV(A*B)=FV(A)\cup FV(B),其中*是一个连接词\\
&FV(*xA)=FV(A)-\{x\}，其中*是一个量词
\end{align}\right .
$$

可以看出量词是对于变元范围的一个约束，被量词修饰的变元不是一个自由变元。需要注意的是在一个语句中同一个变元可能会出现多次，因此在语句中一个变元可以既作为自由变元也作为约束变元出现（但绝不会在同一次出现中满足两者）。对于一个不含自由变元（$FV(A)=\varnothing$）的公式 $A$，我们称其为一个语句。

## 替换

替换说的是我们可以使用一个项来替代一个自由变元来得到一个新的项或者公式。当然这种替换不能是盲目的，我们需要在替换的过程中保持同一性（虽然我们还没有定义所谓的“同一性”）。我们把 $s[t/x]$ 记为用 $t$ 替换 $s$ 中的自由变元 $x$ 的结果。对于项的替换，有一个简单的归纳定义：

$$
\begin{array}
y y[t/x]=y, &y\neq x且为变元\\
x[t/x]=t\\
c[t/x]=c, &c为常元\\
f(t_1...t_n)[t/x]=f(t_1[t/x]...t_n[t/x])
\end{array}
$$

很符合直觉的定义。不过在公式中，事情就变得复杂起来：公式中是存在约束的。对于除了量词之外的符号，替换的定义和自由变元的定义是相似的，这里不再重复。但对于量词，我们有如下的定义：

$$
\begin{aligned}
(*xA)[t/x]&=*xA\\
(*yA)[t/x]&=*yA[t/x]\qquad\qquad y\not\in FV(t)\\
(*yA)[t/x]&=*zA[z/y][t/x]\qquad其中y\in FV(t),z\notin FV(t)且z不是A中的变元
\end{aligned}
$$

这个东西就不是很直观了... 第一条规则说明了有约束的变元是不可以被替换的，这点应该比较容易理解。考虑这样一个例子：命题 $A$: $\exists x(x+y=0)$, 我们用 $y$ 替换 $x$，得到 $\exists y(y+y=0)$，这与第一个命题显然不是一回事。

第二条规则说明了只要替换的变量与约束变量无关就可以随意替换。$\exists x(x+y=0)$ 和 $\exists x(x+z=0)$ 并没有什么区别，只是名字的不同。不过如果替换的变量与约束变量有关，就需要使用第三条规则了。仍以上面那个命题为例，我们用 $x$ 替换 $y$， 由于 $x\in FV(x)$, 因此我们引入一个与命题无关的变量 $z$，得到 $\exists z(x+y=0)[z/x][x/y]=\exists z(z+y=0)[x/y]=\exists z(z+x=0)$。可以看出第三条规则是把约束变量用一个绝对无关（没有在命题中出现）的变量来替代，再进行之前的替换，否则替代过程结果由于受到量词的约束会变得十分混乱。（《十二讲》中对 $z$ 的序号也有所规定，我想这不是重点）

## Gödel 数

（笔者不太想装德语输入法，还是叫哥德尔好了）

哥德尔定理的证明的一个重要元素就是对所有的公式进行编号，而这个序号就是哥德尔数。李未将其形容为指针是十分恰当的。为了定义哥德尔数，我们首先要定义序列数：

$$
\langle a_1,a_2...a_n\rangle=p_1^{a_1+1}p_2^{a_2+1}...p_n^{a_n+1}，其中p_i为第i个素数
$$


显然序列与序列数是一一对应的。在序列数的基础上，我们可以定义哥德尔码。由于笔者用的两本书上的定义方式有很大区别，因此在此略过具体细节。根据哥德尔码的归纳定义，我们可以“轻松地”求出任何一个命题的哥德尔数——尽管这没有什么意义。重要的是以下结论：

$$
哥德尔编码是任意一个一阶语言到哥德尔数的一一映射
$$

这个结论应该是算数基本定理的推论。但具体证明也因编码而定，在此略过。

## 一点剧透：《皇帝新脑》中对哥德尔定理的证明

太晚了，明天写。
